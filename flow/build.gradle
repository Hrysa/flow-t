apply plugin: 'com.android.library'

android {
    compileSdkVersion 27



    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'



    implementation 'io.reactivex.rxjava2:rxjava:2.1.12'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    implementation 'com.github.bumptech.glide:glide:4.6.1'
//    compile 'com.jcodecraeer:xrecyclerview:1.3.2'

    //support
    implementation 'android.arch.lifecycle:extensions:1.1.1'
//  implementation "com.android.support:appcompat-v7:27.0.0"
    implementation "com.android.support:recyclerview-v7:27.1.1"
}



//def _BASENAME = "flow";
//def _VERSION = "1.0";
//def _DestinationPath = "build"; //生成jar包的位置
//def zipFile = file('build/intermediates/bundles/default/classes.jar'); //待打包文件位置

//task deleteBuild(type:Delete){
//    delete _DestinationPath + _BASENAME + _VERSION + ".jar"
//}
//
//task makeJar(type:Jar){
//    from zipTree(zipFile)
//    from fileTree(dir:'src/main',includes:['assets/**']) //将assets目录打入jar包
//    baseName = _BASENAME + "-" + _VERSION
//    destinationDir = file(_DestinationPath)
//}
//
//makeJar.dependsOn(deleteBuild, build)

task deleteJar(type: Delete) {
    delete 'libs/jars/logmanagementlib.jar'
}

task createJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('libs/jars/')
    include('classes.jar')
    rename('classes.jar', 'logmanagementlib.jar')
}

createJar.dependsOn(deleteJar, build)